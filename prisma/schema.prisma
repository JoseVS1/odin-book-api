// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  username  String   @unique
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  profile   Profile?
  posts     Post[]
  follows   Follow[] @relation("UserFollows")
  followers Follow[] @relation("UserFollowers")
  likes     Like[]
  comments  Comment[]
}

model Profile {
  id              String  @id @default(uuid())
  userId          String  @unique
  firstName       String?
  lastName        String?
  birthDate       DateTime?
  gender          String?
  bio             String?
  profilePictureUrl String?

  user            User    @relation(fields: [userId], references: [id])
}

model Post {
  id            String   @id @default(uuid())
  userId        String
  content       String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  likeCount     Int      @default(0)
  commentCount  Int      @default(0)
  isDeleted     Boolean  @default(false)
  
  user          User     @relation(fields: [userId], references: [id])
  comments      Comment[]
  likes         Like[]
}

model Comment {
  id              String   @id @default(uuid())
  text            String
  userId          String
  postId          String
  parentCommentId String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user            User     @relation(fields: [userId], references: [id])
  post            Post     @relation(fields: [postId], references: [id])
  parentComment   Comment? @relation("ParentChild", fields: [parentCommentId], references: [id])
  replies        Comment[] @relation("ParentChild")
}

model Follow {
  id         String   @id @default(uuid())
  userId     String
  followerId String
  status     String

  user       User     @relation("UserFollows", fields: [userId], references: [id])
  follower   User     @relation("UserFollowers", fields: [followerId], references: [id])
}

model Like {
  id        String   @id @default(uuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
}
